import { MonitoringData, Solution, Agent } from '../types/monitoring';

export const dummyMonitoringData: MonitoringData = {
  last_updated: new Date().toISOString(),
  total_files: 18,
  files_with_errors: 7,
  critical_issues: 4,
  system_health: 'critical',
  agent_status: 'active',
  pipeline_status: 'failed',
  metrics: {
    cpu_usage: 78,
    memory_usage: 85,
    disk_usage: 67,
    network_latency: 45,
    active_pipelines: 3,
    successful_deployments_today: 12,
    failed_builds_today: 4,
    docker_containers_running: 24
  },
  files: [
    {
      file: 'Dockerfile',
      status: 'critical',
      last_checked: new Date(Date.now() - 180000).toISOString(),
      error_count: 3,
      critical_count: 2,
      uptime_percentage: 76.2,
      pipeline_stage: 'build',
      build_status: 'failed',
      errors: [
        {
          timestamp: new Date(Date.now() - 180000).toISOString(),
          file: 'Dockerfile',
          error_type: 'DOCKERFILE',
          line_number: 12,
          message: 'Base image vulnerability: node:14 contains 23 high-severity vulnerabilities',
          ai_analysis: 'The base image node:14 is outdated and contains multiple security vulnerabilities. Upgrading to node:18-alpine would resolve most issues and reduce image size.',
          severity: 'critical',
          fix_suggestion: 'Update base image to node:18-alpine and rebuild container',
          auto_fixable: true,
          fix_applied: false,
          pipeline_stage: 'build',
          commit_hash: 'a7b3c9d',
          branch: 'main'
        },
        {
          timestamp: new Date(Date.now() - 120000).toISOString(),
          file: 'Dockerfile',
          error_type: 'DOCKERFILE',
          line_number: 25,
          message: 'Missing multi-stage build optimization causing 340MB larger image',
          ai_analysis: 'Single-stage build includes development dependencies in production image. Multi-stage build would reduce image size by ~70%.',
          severity: 'critical',
          fix_suggestion: 'Implement multi-stage Dockerfile with separate build and runtime stages',
          auto_fixable: true,
          fix_applied: false,
          pipeline_stage: 'build',
          commit_hash: 'a7b3c9d',
          branch: 'main'
        },
        {
          timestamp: new Date(Date.now() - 90000).toISOString(),
          file: 'Dockerfile',
          error_type: 'SECURITY',
          line_number: 8,
          message: 'Running container as root user (security risk)',
          ai_analysis: 'Container runs with root privileges, violating security best practices. Create dedicated user for application runtime.',
          severity: 'high',
          fix_suggestion: 'Add USER directive to run container as non-root user',
          auto_fixable: true,
          fix_applied: false,
          pipeline_stage: 'build',
          commit_hash: 'a7b3c9d',
          branch: 'main'
        }
      ]
    },
    {
      file: 'docker-compose.yml',
      status: 'critical',
      last_checked: new Date(Date.now() - 240000).toISOString(),
      error_count: 2,
      critical_count: 1,
      uptime_percentage: 82.1,
      pipeline_stage: 'deploy',
      build_status: 'failed',
      errors: [
        {
          timestamp: new Date(Date.now() - 240000).toISOString(),
          file: 'docker-compose.yml',
          error_type: 'NETWORK',
          line_number: 15,
          message: 'Network configuration error: Port 3000 already in use',
          ai_analysis: 'Port conflict detected. Another service is already binding to port 3000, causing deployment failure.',
          severity: 'critical',
          fix_suggestion: 'Change application port to 3001 or stop conflicting service',
          auto_fixable: true,
          fix_applied: false,
          pipeline_stage: 'deploy',
          commit_hash: 'b8c4d1e',
          branch: 'develop'
        },
        {
          timestamp: new Date(Date.now() - 180000).toISOString(),
          file: 'docker-compose.yml',
          error_type: 'CONFIG',
          line_number: 28,
          message: 'Missing health check configuration for database service',
          ai_analysis: 'Database container lacks health checks, causing premature application startup and connection failures.',
          severity: 'high',
          fix_suggestion: 'Add health check configuration for PostgreSQL service',
          auto_fixable: true,
          fix_applied: false,
          pipeline_stage: 'deploy',
          commit_hash: 'b8c4d1e',
          branch: 'develop'
        }
      ]
    },
    {
      file: '.github/workflows/ci.yml',
      status: 'critical',
      last_checked: new Date(Date.now() - 300000).toISOString(),
      error_count: 2,
      critical_count: 1,
      uptime_percentage: 68.9,
      pipeline_stage: 'test',
      build_status: 'failed',
      errors: [
        {
          timestamp: new Date(Date.now() - 300000).toISOString(),
          file: '.github/workflows/ci.yml',
          error_type: 'BUILD',
          line_number: 42,
          message: 'Build timeout: Jest tests taking longer than 10 minutes',
          ai_analysis: 'Test suite is running inefficiently with potential infinite loops or resource contention. Several tests are not properly mocked.',
          severity: 'critical',
          fix_suggestion: 'Optimize test suite, add proper mocking, and increase timeout to 15 minutes',
          auto_fixable: false,
          fix_applied: false,
          pipeline_stage: 'test',
          commit_hash: 'c9d5e2f',
          branch: 'feature/auth'
        },
        {
          timestamp: new Date(Date.now() - 240000).toISOString(),
          file: '.github/workflows/ci.yml',
          error_type: 'CONFIG',
          line_number: 18,
          message: 'Missing environment variables for database connection',
          ai_analysis: 'CI pipeline lacks required environment variables for database testing, causing integration tests to fail.',
          severity: 'high',
          fix_suggestion: 'Add DATABASE_URL and TEST_DB_NAME to GitHub Actions secrets',
          auto_fixable: false,
          fix_applied: false,
          pipeline_stage: 'test',
          commit_hash: 'c9d5e2f',
          branch: 'feature/auth'
        }
      ]
    },
    {
      file: 'k8s/deployment.yaml',
      status: 'warning',
      last_checked: new Date(Date.now() - 360000).toISOString(),
      error_count: 2,
      critical_count: 0,
      uptime_percentage: 94.3,
      pipeline_stage: 'deploy',
      build_status: 'running',
      errors: [
        {
          timestamp: new Date(Date.now() - 360000).toISOString(),
          file: 'k8s/deployment.yaml',
          error_type: 'DEPLOYMENT',
          line_number: 23,
          message: 'Resource limits not specified for container',
          ai_analysis: 'Missing CPU and memory limits can cause resource contention and pod eviction in production.',
          severity: 'medium',
          fix_suggestion: 'Add resource requests and limits to container specification',
          auto_fixable: true,
          fix_applied: false,
          pipeline_stage: 'deploy',
          commit_hash: 'd1e6f3g',
          branch: 'main'
        },
        {
          timestamp: new Date(Date.now() - 300000).toISOString(),
          file: 'k8s/deployment.yaml',
          error_type: 'CONFIG',
          line_number: 45,
          message: 'Liveness probe timeout too aggressive (2s)',
          ai_analysis: 'Liveness probe timeout is too short for application startup, causing unnecessary pod restarts.',
          severity: 'medium',
          fix_suggestion: 'Increase liveness probe timeout to 10s and add readiness probe',
          auto_fixable: true,
          fix_applied: false,
          pipeline_stage: 'deploy',
          commit_hash: 'd1e6f3g',
          branch: 'main'
        }
      ]
    },
    {
      file: 'nginx.conf',
      status: 'warning',
      last_checked: new Date(Date.now() - 420000).toISOString(),
      error_count: 1,
      critical_count: 0,
      uptime_percentage: 97.8,
      pipeline_stage: 'deploy',
      build_status: 'success',
      errors: [
        {
          timestamp: new Date(Date.now() - 420000).toISOString(),
          file: 'nginx.conf',
          error_type: 'NETWORK',
          line_number: 34,
          message: 'SSL configuration using deprecated TLS 1.1',
          ai_analysis: 'TLS 1.1 is deprecated and poses security risks. Modern browsers may reject connections.',
          severity: 'high',
          fix_suggestion: 'Update SSL configuration to use TLS 1.2+ only',
          auto_fixable: true,
          fix_applied: false,
          pipeline_stage: 'deploy',
          commit_hash: 'e2f7g4h',
          branch: 'main'
        }
      ]
    },
    {
      file: 'package.json',
      status: 'warning',
      last_checked: new Date(Date.now() - 480000).toISOString(),
      error_count: 1,
      critical_count: 0,
      uptime_percentage: 99.1,
      pipeline_stage: 'build',
      build_status: 'success',
      errors: [
        {
          timestamp: new Date(Date.now() - 480000).toISOString(),
          file: 'package.json',
          error_type: 'SECURITY',
          line_number: 15,
          message: '7 vulnerable dependencies detected',
          ai_analysis: 'Several npm packages have known security vulnerabilities. Running npm audit fix would resolve most issues.',
          severity: 'medium',
          fix_suggestion: 'Run npm audit fix and update vulnerable dependencies',
          auto_fixable: true,
          fix_applied: false,
          pipeline_stage: 'build',
          commit_hash: 'f3g8h5i',
          branch: 'main'
        }
      ]
    },
    {
      file: 'terraform/main.tf',
      status: 'fixed',
      last_checked: new Date(Date.now() - 600000).toISOString(),
      error_count: 0,
      critical_count: 0,
      uptime_percentage: 99.9,
      pipeline_stage: 'deploy',
      build_status: 'success',
      last_fix_attempt: new Date(Date.now() - 3600000).toISOString(),
      errors: []
    },
    {
      file: 'src/api/health.js',
      status: 'healthy',
      last_checked: new Date(Date.now() - 120000).toISOString(),
      error_count: 0,
      critical_count: 0,
      uptime_percentage: 100,
      pipeline_stage: 'test',
      build_status: 'success',
      errors: []
    }
  ]
};

export const dummySolutions: Solution[] = [
  {
    id: 'sol-001',
    name: 'Docker Image Optimizer',
    description: 'Automatically optimizes Dockerfile for security and size reduction',
    category: 'docker',
    status: 'active',
    success_rate: 94,
    last_executed: new Date(Date.now() - 3600000).toISOString(),
    execution_count: 67,
    avg_execution_time: 45.2,
    error_types: ['DOCKERFILE', 'SECURITY'],
    auto_trigger: true,
    created_by: 'devops-team',
    created_at: new Date(Date.now() - 2592000000).toISOString(),
    pipeline_stages: ['build', 'security-scan']
  },
  {
    id: 'sol-002',
    name: 'Network Port Resolver',
    description: 'Automatically resolves port conflicts and network configuration issues',
    category: 'network',
    status: 'active',
    success_rate: 89,
    last_executed: new Date(Date.now() - 1800000).toISOString(),
    execution_count: 134,
    avg_execution_time: 12.8,
    error_types: ['NETWORK', 'CONFIG'],
    auto_trigger: true,
    created_by: 'infrastructure-team',
    created_at: new Date(Date.now() - 3888000000).toISOString(),
    pipeline_stages: ['deploy', 'post-deploy']
  },
  {
    id: 'sol-003',
    name: 'CI/CD Pipeline Optimizer',
    description: 'Optimizes build times and resolves common pipeline failures',
    category: 'build',
    status: 'active',
    success_rate: 91,
    last_executed: new Date(Date.now() - 7200000).toISOString(),
    execution_count: 89,
    avg_execution_time: 180.5,
    error_types: ['BUILD', 'TEST'],
    auto_trigger: false,
    created_by: 'ci-cd-team',
    created_at: new Date(Date.now() - 1296000000).toISOString(),
    pipeline_stages: ['build', 'test']
  },
  {
    id: 'sol-004',
    name: 'Kubernetes Resource Manager',
    description: 'Automatically configures resource limits and health checks',
    category: 'deployment',
    status: 'active',
    success_rate: 96,
    last_executed: new Date(Date.now() - 10800000).toISOString(),
    execution_count: 45,
    avg_execution_time: 67.3,
    error_types: ['DEPLOYMENT', 'CONFIG'],
    auto_trigger: true,
    created_by: 'k8s-team',
    created_at: new Date(Date.now() - 5184000000).toISOString(),
    pipeline_stages: ['deploy']
  },
  {
    id: 'sol-005',
    name: 'Security Vulnerability Patcher',
    description: 'Automatically updates vulnerable dependencies and configurations',
    category: 'security',
    status: 'active',
    success_rate: 87,
    last_executed: new Date(Date.now() - 14400000).toISOString(),
    execution_count: 156,
    avg_execution_time: 234.7,
    error_types: ['SECURITY', 'CONFIG'],
    auto_trigger: true,
    created_by: 'security-team',
    created_at: new Date(Date.now() - 1728000000).toISOString(),
    pipeline_stages: ['build', 'security-scan', 'deploy']
  },
  {
    id: 'sol-006',
    name: 'Test Suite Accelerator',
    description: 'Optimizes test execution and resolves timeout issues',
    category: 'testing',
    status: 'pending',
    success_rate: 83,
    last_executed: new Date(Date.now() - 21600000).toISOString(),
    execution_count: 78,
    avg_execution_time: 145.2,
    error_types: ['TEST', 'BUILD'],
    auto_trigger: false,
    created_by: 'qa-team',
    created_at: new Date(Date.now() - 2160000000).toISOString(),
    pipeline_stages: ['test']
  }
];

export const dummyAgents: Agent[] = [
  {
    id: 'agent-002',
    name: 'Docker-Agent-01',
    type: 'docker',
    status: 'online',
    health: 'warning',
    last_heartbeat: new Date(Date.now() - 15000).toISOString(),
    uptime: 94.2,
    cpu_usage: 78,
    memory_usage: 89,
    tasks_completed: 1567,
    tasks_failed: 45,
    version: 'v2.8.3',
    location: 'us-west-2',
    capabilities: ['container-optimization', 'image-scanning', 'vulnerability-detection'],
    current_task: 'Scanning Docker images for vulnerabilities',
    queue_size: 7,
    docker_containers: 24
  },
  {
    id: 'agent-003',
    name: 'Network-Agent-01',
    type: 'network',
    status: 'online',
    health: 'healthy',
    last_heartbeat: new Date().toISOString(),
    uptime: 99.1,
    cpu_usage: 23,
    memory_usage: 34,
    tasks_completed: 3456,
    tasks_failed: 12,
    version: 'v1.9.7',
    location: 'eu-west-1',
    capabilities: ['network-monitoring', 'port-management', 'connectivity-testing'],
    current_task: 'Resolving port conflicts in staging environment',
    queue_size: 2
  },
  {
    id: 'agent-004',
    name: 'Security-Scanner-01',
    type: 'security',
    status: 'busy',
    health: 'healthy',
    last_heartbeat: new Date(Date.now() - 30000).toISOString(),
    uptime: 97.8,
    cpu_usage: 56,
    memory_usage: 72,
    tasks_completed: 1890,
    tasks_failed: 34,
    version: 'v4.1.2',
    location: 'us-central-1',
    capabilities: ['vulnerability-scanning', 'compliance-checking', 'security-patching'],
    current_task: 'Running security audit on production deployment',
    queue_size: 5
  },
  {
    id: 'agent-005',
    name: 'Test-Runner-01',
    type: 'testing',
    status: 'error',
    health: 'critical',
    last_heartbeat: new Date(Date.now() - 900000).toISOString(),
    uptime: 76.3,
    cpu_usage: 0,
    memory_usage: 0,
    tasks_completed: 2234,
    tasks_failed: 156,
    version: 'v2.5.4',
    location: 'ap-southeast-1',
    capabilities: ['test-execution', 'performance-testing', 'coverage-analysis'],
    current_task: undefined,
    queue_size: 0
  },
  {
    id: 'agent-006',
    name: 'Deploy-Agent-01',
    type: 'deployment',
    status: 'online',
    health: 'healthy',
    last_heartbeat: new Date(Date.now() - 45000).toISOString(),
    uptime: 99.5,
    cpu_usage: 34,
    memory_usage: 45,
    tasks_completed: 1123,
    tasks_failed: 8,
    version: 'v3.7.1',
    location: 'eu-central-1',
    capabilities: ['k8s-deployment', 'rollback-management', 'health-monitoring'],
    current_task: 'Deploying microservice-auth to production',
    queue_size: 1,
    pipeline_stage: 'deploy'
  }
];